package com.pg.admin.service;



import java.util.List;

import org.springframework.stereotype.Service;

import com.pg.admin.dto.UserDto;
import com.pg.admin.entity.User;
import com.pg.admin.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;

    // âœ… Create a new user
    @Override
    public UserDto createUser(UserDto userDto) {
        User user = convertToEntity(userDto);
        User savedUser = userRepository.save(user);
        return convertToDto(savedUser);
    }

    // âœ… Get a user by ID
    @Override
    public UserDto getUserById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + id));
        return convertToDto(user);
    }

    // âœ… Update a user
    @Override
    public UserDto updateUser(Long id, UserDto userDto) {
        User existing = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + id));

        existing.setUserName(userDto.getUserName());
        existing.setUserRoom(userDto.getUserRoom());
        existing.setUserMobile(userDto.getUserMobile());
        existing.setUserEbill(userDto.getUserEbill());
        existing.setPaymentStatus(userDto.getPaymentStatus());

        User updated = userRepository.save(existing);
        return convertToDto(updated);
    }

    // âœ… Delete a user
    @Override
    public void deleteUser(Long id) {
        if (!userRepository.existsById(id)) {
            throw new RuntimeException("User not found with ID: " + id);
        }
        userRepository.deleteById(id);
    }

    // âœ… Get all users
    @Override
    public List<UserDto> getAllUsers() {
        return userRepository.findAll()
                .stream()
                .map(this::convertToDto)
                .toList();
    }

    // âœ… Get user by mobile
    @Override
    public UserDto getUserByMobile(String mobile) {
        User user = userRepository.findByUserMobile(mobile)
                .orElseThrow(() -> new RuntimeException("User not found with mobile: " + mobile));
        return convertToDto(user);
    }

    // âœ… Update electricity bill and reset payment status
    @Override
    public UserDto updateUserEbill(Long id, Double ebill) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + id));

        // update ebill
        user.setUserEbill(ebill);

        // reset payment status to "Due" whenever new bill assigned
        user.setPaymentStatus("Due");

        User updated = userRepository.save(user);
        return convertToDto(updated);
    }


    // ðŸ”„ Convert Entity â†’ DTO
    private UserDto convertToDto(User user) {
        UserDto dto = new UserDto();
        dto.setUserId(user.getUserId());
        dto.setUserName(user.getUserName());
        dto.setUserRoom(user.getUserRoom());
        dto.setUserMobile(user.getUserMobile());
        dto.setUserEbill(user.getUserEbill());
       // dto.setLastPaymentDate(user.getLastPaymentDate());
        dto.setPaymentStatus(user.getPaymentStatus());
        return dto;
    }

    // ðŸ”„ Convert DTO â†’ Entity
    private User convertToEntity(UserDto dto) {
        User user = new User();
        user.setUserId(dto.getUserId());
        user.setUserName(dto.getUserName());
        user.setUserRoom(dto.getUserRoom());
        user.setUserMobile(dto.getUserMobile());
        user.setUserEbill(dto.getUserEbill());
       // user.setLastPaymentDate(dto.getLastPaymentDate());
        user.setPaymentStatus(dto.getPaymentStatus());
        return user;
    }
}

















//import java.time.LocalDate;
//import java.util.List;
//import java.util.stream.Collectors;
//
//import org.modelmapper.ModelMapper;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.stereotype.Service;
//
//import com.pg.admin.dto.UserDto;
//import com.pg.admin.entity.User;
//import com.pg.admin.repository.UserRepository;
//
//import lombok.RequiredArgsConstructor;
//
//@Service
//@RequiredArgsConstructor
//public class UserServiceImpl implements UserService {
//
//    private final UserRepository userRepository;
//
//    @Autowired
//    private PasswordEncoder passwordEncoder;
//    private final ModelMapper modelMapper; // if you use ModelMapper for mapping
//    
//
//    // âœ… Convert User entity â†’ UserDto
//    private UserDto mapToDto(User user) {
//        return UserDto.builder()
//                .userId(user.getUserId())
//                .userName(user.getUserName())
//                .userPassword(user.getUserPassword())   // include password
//                .userRoom(user.getUserRoom())
//                .userAadhar(user.getUserAadhar())
//                .userPlace(user.getUserPlace())
//                .userMobile(user.getUserMobile())
//                .userMonthlyRent(user.getUserMonthlyRent())
//                .userEbill(user.getUserEbill())
//                .build();
//    }
//
//    // âœ… Convert UserDto â†’ User entity
//    private User mapToEntity(UserDto dto) {
//        return User.builder()
//                .userId(dto.getUserId())
//                .userName(dto.getUserName())
//                .userPassword(dto.getUserPassword())   // include password
//                .userRoom(dto.getUserRoom())
//                .userAadhar(dto.getUserAadhar())
//                .userPlace(dto.getUserPlace())
//                .userMobile(dto.getUserMobile())
//                .userMonthlyRent(dto.getUserMonthlyRent())
//                .userEbill(dto.getUserEbill())
//                .build();
//    }
//
//    /**
//     * âœ… Create new User
//     * - Encodes the password before saving.
//     * - Saves User into DB and returns UserDto.
//     */
//    @Override
//    public UserDto createUser(UserDto userDto) {
//        User user = mapToEntity(userDto);
//        user.setUserPassword(passwordEncoder.encode(userDto.getUserPassword())); // encode password
//        return mapToDto(userRepository.save(user));
//    }
//
//    /**
//     * âœ… Fetch a User by ID
//     * @param userId (User ID)
//     * @return UserDto if found, else throws RuntimeException
//     */
//    @Override
//    public UserDto getUserById(Long userId) {
//        return userRepository.findById(userId)
//                .map(this::mapToDto)
//                .orElseThrow(() -> new RuntimeException("User not found"));
//    }
//
//    /**
//     * âœ… Update User details
//     * - Finds user by ID.
//     * - Updates all editable fields except password.
//     * - Saves and returns updated UserDto.
//     */
//    @Override
//    public UserDto updateUser(Long userId, UserDto userDto) {
//        User user = userRepository.findById(userId)
//                .orElseThrow(() -> new RuntimeException("User not found"));
//
//        user.setUserName(userDto.getUserName());
//        user.setUserRoom(userDto.getUserRoom());
//        user.setUserAadhar(userDto.getUserAadhar());
//        user.setUserPlace(userDto.getUserPlace());
//        user.setUserMobile(userDto.getUserMobile());
//        user.setUserMonthlyRent(userDto.getUserMonthlyRent());
//        user.setUserEbill(userDto.getUserEbill());
//
//        return mapToDto(userRepository.save(user));
//    }
//
//    /**
//     * âœ… Delete User by ID
//     * - Removes user record from DB.
//     */
//    @Override
//    public void deleteUser(Long userId) {
//        userRepository.deleteById(userId);
//    }
//
//    /**
//     * âœ… Get all Users
//     * - Fetches all users from DB.
//     * - Maps entities to DTOs.
//     */
//    @Override
//    public List<UserDto> getAllUsers() {
//        return userRepository.findAll()
//                .stream()
//                .map(this::mapToDto)
//                .collect(Collectors.toList());
//    }
//
//    /**
//     * âœ… Find user by Mobile number
//     * @param mobile (User's mobile number)
//     * @return UserDto if found, else throws RuntimeException
//     */
//    @Override
//    public UserDto getUserByMobile(String mobile) {
//        return userRepository.findByUserMobile(mobile)
//                .map(this::mapToDto)
//                .orElseThrow(() -> new RuntimeException("User not found with mobile: " + mobile));
//    }
//
//    /**
//     * âœ… Update only Electricity Bill
//     * - Finds user by ID.
//     * - Updates ebill field only.
//     * - Saves updated user and returns UserDto.
//     *
//    @Override
//    public UserDto updateUserEbill(Long userId, Double ebill) {
//        User user = userRepository.findById(userId)
//                .orElseThrow(() -> new RuntimeException("User not found"));
//        user.setUserEbill(ebill);
//        return mapToDto(userRepository.save(user));
//    }*/
//    
//    // âœ… Update only electricity bill
//    @Override
//    public UserDto updateUserEbill(Long id, Double ebill) {
//        User user = userRepository.findById(id)
//                .orElseThrow(() -> new RuntimeException("User not found with id: " + id));
//
//        user.setUserEbill(ebill);  // only update ebill
//        User updatedUser = userRepository.save(user);
//
//        return mapToDto(updatedUser);
//    }
//
////    @Override
////    public User markBillPaid(Long userId) {
////        User user = userRepository.findById(userId).orElseThrow();
////        user.setLastPaymentDate(LocalDate.now()); // mark current date as paid
////        return userRepository.save(user);
////    }
//
////    @Override
////    public User markBillPaid(Long id, String method) {
////        User user = userRepository.findById(id)
////                .orElseThrow(() -> new RuntimeException("User not found"));
////
////        user.setLastPaymentDate(LocalDate.now());   // record todayâ€™s date
////        user.setPaymentStatus("Paid via " + method); // save status/message
////
////        return userRepository.save(user);
////    }
//    
////    @Override
////    public User markBillPaid(Long id, String method) {
////        User user = userRepository.findById(id)
////                .orElseThrow(() -> new RuntimeException("User not found"));
////
////        // Update payment fields
////        user.setPaymentStatus("Paid");
////        user.setLastPaymentDate(LocalDate.now());
////       //user.setPaymentMethod(method);
////
////        return userRepository.save(user);
////    }
//
//    
//    
//    
//}
