package com.pg.admin.controller;


import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.pg.admin.dto.UserDto;
import com.pg.admin.service.UserService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "http://localhost:3000")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping
    public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto) {
        return ResponseEntity.ok(userService.createUser(userDto));
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {
        return ResponseEntity.ok(userService.getUserById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserDto> updateUser(@PathVariable Long id, @RequestBody UserDto userDto) {
        return ResponseEntity.ok(userService.updateUser(id, userDto));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<UserDto>> getAllUsers() {
        return ResponseEntity.ok(userService.getAllUsers());
    }

    // âœ… Get user by mobile number
    @GetMapping("/mobile/{mobile}")
    public ResponseEntity<UserDto> getUserByMobile(@PathVariable String mobile) {
        return ResponseEntity.ok(userService.getUserByMobile(mobile));
    }
    
    
    @PatchMapping("/{id}/ebill")
    public ResponseEntity<Object> updateEbill(@PathVariable Long id, @RequestParam Double ebill) {
        return ResponseEntity.ok(userService.updateUserEbill(id, ebill));
    }

    
    
    
    
}

    
    
    
    
    
    
    
    
    
    
    
    
//    
//    
//    
//    
//
//    // Create user
//    @PostMapping
//    public ResponseEntity<UserDto> createUser(@RequestBody UserDto dto,
//                                              @RequestParam String password) {
//        return ResponseEntity.ok(userService.createUser(dto, password));
//    }
//
//    // Get user by ID
//    @GetMapping("/{id}")
//    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {
//        return ResponseEntity.ok(userService.getUserById(id));
//    }
//
//    // Get all users
//    @GetMapping
//    public ResponseEntity<List<UserDto>> getAllUsers() {
//        return ResponseEntity.ok(userService.getAllUsers());
//    }
//
//    // Update user
//    @PutMapping("/{id}")
//    public ResponseEntity<UserDto> updateUser(@PathVariable Long id,
//                                              @RequestBody UserDto dto) {
//        return ResponseEntity.ok(userService.updateUser(id, dto));
//    }
//
//    // Delete user
//    @DeleteMapping("/{id}")
//    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
//        userService.deleteUser(id);
//        return ResponseEntity.ok().build();
//    }
//
//    // Update user electricity bill
//    @PatchMapping("/{id}/ebill")
//    public ResponseEntity<UserDto> updateUserEbill(@PathVariable Long id,
//                                                   @RequestParam Double ebill) {
//        return ResponseEntity.ok(userService.updateUserEbill(id, ebill));
//    }
//}
