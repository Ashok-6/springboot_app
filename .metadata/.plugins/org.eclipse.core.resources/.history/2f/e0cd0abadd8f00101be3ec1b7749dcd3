
package com.pg.admin.service;


import org.springframework.stereotype.Service;

import com.pg.admin.dto.AdminDto;
import com.pg.admin.dto.LoginRequest;
import com.pg.admin.dto.LoginResponse;
import com.pg.admin.entity.Admin;
import com.pg.admin.repository.AdminRepository;
import com.pg.admin.security.JwtUtil;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AdminServiceImpl implements AdminService {

    private final AdminRepository adminRepository;
    private final JwtUtil jwtUtil;

    @Override
    public AdminDto register(AdminDto dto, String rawPassword) {
        Admin admin = Admin.builder()
                .adminName(dto.getAdminName())
                .password(rawPassword)   // âš  store plain password
                .build();

        Admin saved = adminRepository.save(admin);

        return AdminDto.builder()
                .adminId(saved.getAdminId())
                .adminName(saved.getAdminName())
                .build();
    }

    @Override
    public LoginResponse login(LoginRequest request) {
        Admin admin = adminRepository.findByAdminName(request.getAdminName())
                .orElseThrow(() -> new RuntimeException("Admin not found"));

        // simple plain-text password check
        if (!request.getPassword().equals(admin.getPassword())) {
            throw new RuntimeException("Invalid credentials");
        }

        // generate token
        String token = jwtUtil.generateToken(admin.getAdminName());
		
        AdminDto dto = AdminDto.builder()
                .adminId(admin.getAdminId())
                .adminName(admin.getAdminName())
                .build();

        return new LoginResponse(token, dto);
    }
    
/*    @Override
    public LoginResponse login(LoginRequest request) {
        Admin admin = adminRepository.findByAdminName(request.getAdminName())
                .orElseThrow(() -> new RuntimeException("Admin not found"));

        if (!request.getPassword().equals(admin.getPassword())) {
            throw new RuntimeException("Invalid credentials");
        }

        return jwtUtil.generateToken(admin.getAdminName()); // return only token
    }
*/

    @Override
    public AdminDto getAdminDetails(String username) {
        Admin admin = adminRepository.findByAdminName(username)
                .orElseThrow(() -> new RuntimeException("Admin not found"));

        return AdminDto.builder()
                .adminId(admin.getAdminId())
                .adminName(admin.getAdminName())
                .build();
    }
}
