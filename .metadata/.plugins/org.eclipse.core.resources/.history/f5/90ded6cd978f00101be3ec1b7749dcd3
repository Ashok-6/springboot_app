package com.pg.payment.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.pg.user.dto.PaymentDto;
import com.pg.user.dto.UserDto;
import com.pg.user.entity.Payment;
import com.pg.user.feign.AdminClient;
import com.pg.user.repository.PaymentRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PaymentServiceImpl implements PaymentService {

	private final PaymentRepository paymentRepository;
	private final AdminClient adminClient; // ✅ talk to admin-service

	@Override
	public PaymentDto createPayment(Long userId, String paymentMethod) {
		// ✅ Fetch user details from Admin/User service using Feign
		UserDto user = adminClient.getUserById(userId);

		if (user == null) {
			throw new RuntimeException("User not found with ID: " + userId);
		}

		// ✅ Calculate total = rent + electricity bill
		Double totalAmount = (user.getUserMonthlyRent() != null ? user.getUserMonthlyRent() : 0.0)
				+ (user.getUserEbill() != null ? user.getUserEbill() : 0.0);

		// ✅ Create payment entity
		Payment payment = new Payment();
		payment.setUserId(user.getUserId());
		payment.setUserName(user.getUserName());
		payment.setAmount(totalAmount);
		payment.setPaymentMethod(paymentMethod);
		payment.setPaymentDate(LocalDateTime.now());

		Payment savedPayment = paymentRepository.save(payment);

		return mapToDto(savedPayment);
	}

	/*
	 * @Override public PaymentDto createPayment(Long userId, String paymentMethod,
	 * Double amount) { // ✅ fetch user from admin-service UserDto user =
	 * adminClient.getUserById(userId);
	 * 
	 * // ✅ create payment with username Payment payment = new Payment();
	 * payment.setUserId(userId); payment.setUserName(user.getUserName()); //
	 * username auto included payment.setAmount(amount);
	 * payment.setPaymentMethod(paymentMethod);
	 * payment.setPaymentDate(LocalDateTime.now());
	 * 
	 * Payment savedPayment = paymentRepository.save(payment);
	 * 
	 * return mapToDto(savedPayment); }
	 */

	@Override
	public PaymentDto getPaymentById(Long paymentId) {
		Payment payment = paymentRepository.findById(paymentId)
				.orElseThrow(() -> new RuntimeException("Payment not found with ID: " + paymentId));
		return mapToDto(payment);
	}

	@Override
	public List<PaymentDto> getAllPayments() {
		return paymentRepository.findAll().stream().map(this::mapToDto).collect(Collectors.toList());
	}

	private PaymentDto mapToDto(Payment payment) {
		PaymentDto dto = new PaymentDto();
		dto.setPaymentId(payment.getPaymentId());
		dto.setUserId(payment.getUserId());
		dto.setUserName(payment.getUserName());
		dto.setAmount(payment.getAmount());
		dto.setPaymentMethod(payment.getPaymentMethod());
		dto.setPaymentDate(payment.getPaymentDate());
		return dto;
	}
}

/*
 * 1 import java.time.LocalDateTime; import java.util.List; import
 * java.util.stream.Collectors;
 * 
 * import org.springframework.stereotype.Service;
 * 
 * import com.pg.payment.dto.PaymentDto; import com.pg.payment.entity.Payment;
 * import com.pg.payment.repository.PaymentRepository;
 * 
 * import lombok.RequiredArgsConstructor;
 * 
 * @Service
 * 
 * @RequiredArgsConstructor public class PaymentServiceImpl implements
 * PaymentService {
 * 
 * private final PaymentRepository paymentRepository;
 * 
 * @Override public PaymentDto createPayment(Long userId, String paymentMethod,
 * Double amount) { Payment payment = Payment.builder() .userId(userId)
 * .amount(amount) .paymentMethod(paymentMethod)
 * .paymentDate(LocalDateTime.now()) .build();
 * 
 * Payment saved = paymentRepository.save(payment); return mapToDto(saved); }
 * 
 * @Override public PaymentDto getPaymentById(Long id) { return
 * paymentRepository.findById(id) .map(this::mapToDto) .orElseThrow(() -> new
 * RuntimeException("Payment not found with id " + id)); }
 * 
 * @Override public List<PaymentDto> getAllPayments() { return
 * paymentRepository.findAll() .stream() .map(this::mapToDto)
 * .collect(Collectors.toList()); }
 * 
 * private PaymentDto mapToDto(Payment payment) { return PaymentDto.builder()
 * .paymentId(payment.getPaymentId()) .userId(payment.getUserId())
 * .amount(payment.getAmount()) .paymentMethod(payment.getPaymentMethod())
 * .paymentDate(payment.getPaymentDate()) .build(); } }
 */
